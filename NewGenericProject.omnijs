/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Jerome Lefebvre",
    "identifier": "com.jpl.newGenericProject",
    "version": "0.1",
    "description": "Create a new generic project",
    "label": "New Generic Project",
    "shortLabel": "newGenericProject"
}*/

/*
Built from a skelton taken from:
https://omni-automation.com/ofac/index.html
*/

var DEBUG = true;

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function tagsName(tags) {
    var tagsName = [];
    tags.forEach(tag => {
        var tagName = tag.parent ? tag.parent.name + ":" : ""
        tagName += tag.name,
            tagsName.push(tagName);
    });
    return tagsName;
}

function existingTags() {
    var existing = [];
    tags.forEach(topTag => {
        existing.push(topTag);
        topTag.tags.forEach(childrenTag => {
            existing.push(childrenTag);
        });
    });
    return existing
}

function foldersName(folders) {
    var foldersName = [];
    folders.forEach(folder => {
        //var tagName = tag.parent ? tag.parent.name + ":" : ""
        //tagName += tag.name,
        foldersName.push(folder.name);
    });
    return foldersName;
}

function existingFolders() {
    var existing = [];
    folders.forEach(folder => {
        existing.push(folder);
        /*topTag.tags.forEach(childrenTag => {
            existing.push(childrenTag);
        });*/
    });
    return existing
}

(() => {
    var action = new PlugIn.Action(function (selection) {
        var inputForm = new Form()
        var projectField = new Form.Field.String(
            "projectInput",
            "Project Name",
            "new project" + getRandomInt(1, 100)
        )
        inputForm.addField(projectField)

        // GOAL
        var goalField = new Form.Field.String(
            "goalInput",
            "Goal (completed when..)",
            "I want to..."
        )
        inputForm.addField(goalField)

        // TAGS
        var tagsAsFlatList = existingTags();
        var tagField = new Form.Field.Option(
            "tagInput",
            "Tags",
            tagsAsFlatList,
            tagsName(tagsAsFlatList),
            tagsAsFlatList[1]
        )
        inputForm.addField(tagField);

        // FOLDER
        var foldersAsFlatList = existingFolders();
        var folderField = new Form.Field.Option(
            "folderInput",
            "Folder",
            foldersAsFlatList,
            foldersName(foldersAsFlatList),
            foldersAsFlatList[1]
        )
        inputForm.addField(folderField);

        // TASK
        var taskField = new Form.Field.String(
            "taskInput",
            "First Task",
            "I first need to.."
        )
        inputForm.addField(taskField)

        // REFERENCE
        var referenceField = new Form.Field.String(
            "referenceInput",
            "Reference Link",
            "/Users/jeromelefebvre/Documents/Finance/Taxes\ Japan/2021"
            //"vscode://file/..."
        )
        inputForm.addField(referenceField)

        formPrompt = "Create a new project"
        formPromise = inputForm.show(formPrompt, "Continue")

        inputForm.validate = function (formObject) {
            // TODO:
            return true
        }

        formPromise.then(function (formObject) {
            console.log("New project will be created");
            var projectName = formObject.values["projectInput"];
            var folder = formObject.values["folderInput"];

            var project = folder.projectNamed(projectName) || new Project(projectName, folder);
            project.status = Project.Status.Active;
            project.containsSingletonActions = false;
            var tag = formObject.values["tagInput"];

            project.addTag(tag);
            project.note = "Goal: " + formObject.values["goalInput"];

            var referenceURL = formObject.values["referenceInput"];

            if (referenceURL) {
                // VS Code project folder
                if (referenceURL.startsWith("vscode")) {
                    var param = encodeURIComponent(referenceURL.split("vscode://file/")[1])
                    referenceURL = "vscode://file/" + param;
                    project.note += "\n\nReference: " + referenceURL;
                }
                // Mac folder
                else if (referenceURL.startsWith("/")) {
                    if (DEBUG) {
                        console.log("Folder link added with:", referenceURL);
                    }
                    var path = "file://" + referenceURL.replaceAll(" ", "%20");
                    console.log(path);
                    var url = URL.fromString(path);
                    if (DEBUG) {
                        console.log(url.string);
                    }
                    project.note += "\n\nReference:\n"
                    project.addLinkedFileURL(url)
                }
            }
            var task = formObject.values["taskInput"];
            new Task("Create project in toggl", project);
            new Task(task, project);
            project.document.windows[0].perspective = Perspective.BuiltIn.Projects
            document.windows[0].selectObjects([project])
        })
        formPromise.catch(function (err) {
            console.log("form cancelled", err.message)
        })
    });

    action.validate = function (selection) {
        return true;
    };
    return action;
})();