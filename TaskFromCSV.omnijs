// COPY & PASTE into editor app. EDIT & SAVE with “.omnifocusjs” file extension.
/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Jerome Lefebvre",
    "identifier": "com.jpl.CSVtoTask",
    "version": "1.0",
    "description": "Convert a list into a list of tasks",
    "label": "Tasks from CSV",
    "shortLabel": "CSV2Task"
}*/

/*
Built from a skelton taken from: 
https://omni-automation.com/ofac/index.html

*/
(() => {
    var action = new PlugIn.Action(function (selection, sender) {
        // action code
        // selection options: tasks, projects, folders, tags, allObjects

        // CREATE FORM FOR GATHERING USER INPUT
        var inputForm = new Form()

        // CREATE TEXT FIELD
        var textField = new Form.Field.String(
            "textInput",
            "Project Name",
            null
        )

        inputForm.addField(textField)

        var multiField = new Form.Field.String(
            "tasksInput",
            "Tasks",
            `
            task1
            task2
            `
        )

        inputForm.addField(multiField)

        // PRESENT THE FORM TO THE USER
        formPrompt = "Copy in a list of tasks:"
        formPromise = inputForm.show(formPrompt, "Continue")

        // VALIDATE THE USER INPUT
        inputForm.validate = function (formObject) {
            textValue = formObject.values["textInput"];
            textStatus = (textValue && textValue.length > 0) ? true : false
            tasksValue = formObject.values["tasksInput"];
            tasksStatus = (tasksValue && tasksValue.length > 0) ? true : false
            validation = (textStatus && tasksStatus) ? true : false
            return validation
        }

        // PROCESSING USING THE DATA EXTRACTED FROM THE FORM
        formPromise.then(function (formObject) {
            var projectName = formObject.values["textInput"];
            var project = projectNamed(projectName) || new Project(projectName);
            project.status = Project.Status.Active;
            project.containsSingletonActions = true;
            var tasksList = formObject.values["tasksInput"];
            const tasksName = tasksList.split("\n");
            tasksName.forEach(task => {
                var action = project.taskNamed(task) || new Task(task, project)
            });
            document.windows[0].perspective = Perspective.BuiltIn.Projects
            document.windows[0].selectObjects([project])

        })
		// PROMISE FUNCTION CALLED UPON FORM CANCELLATION
		formPromise.catch(function(err){
			console.log("form cancelled", err.message)
		})
    });

    action.validate = function (selection) {
        // should verify if it is late in the day, say after 4pm
        return true;

    };
    return action;
})();
