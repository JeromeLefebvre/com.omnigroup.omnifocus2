/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Jerome Lefebvre",
    "identifier": "com.jpl.newMeeting",
    "version": "0.1",
    "description": "Plan a new meeting with a customer",
    "label": "New Customer Meeting",
    "shortLabel": "Cust. Meeting"
}*/
/*
Scripts should have:
1. Issues in GitHub
2. A UI if helpful
3. Good naming for omnifocus menu (easy to spot)
4. Be few
5. Use javascript best practice
6. Verify UI input elements

*/
(() => {
    var action = new PlugIn.Action(function (selection) {
        var inputForm = new Form()

        var customers = folderNamed("OSIsoft").folderNamed("Customers").folders;
        var customersName = customers.map(folder => folder.name)
        var customerField = new Form.Field.Option(
            "customer",
            "Customer:",
            customers,
            customersName,
            customers[1]
        );
        inputForm.addField(customerField)

        var topicField = new Form.Field.String(
            "topic",
            "Topic",
            "article about.."
        )
        inputForm.addField(topicField);

        formPrompt = "New meeting details";
        formPromise = inputForm.show(formPrompt, "Continue")

        formPromise.then(function (formObject) {
            console.log("New customer meeting will be created");

            var customer = formObject.values["customer"];
            if (customer == ".") {
                console.log("Create a new folder and extra tasks");
            }
            /*
            projectName = "PI Square " + formObject.values["topic"];
            const osiFolder = folderNamed("OSIsoft").folderNamed("OSIsoft");

            var project = new Project(projectName, osiFolder)
            const tag = tagNamed("Office");
            project.addTag(tag);

            project.status = Project.Status.Active
            project.sequential = true

            const tasksName = ["Create VS project", "Write article", "Ask for a reviewer"];

            tasksName.forEach(task => {
                new Task(task, project)
            });
            document.windows[0].perspective = Perspective.BuiltIn.Projects
            document.windows[0].selectObjects([project])
            */
        });

    });
    return action;
})();
