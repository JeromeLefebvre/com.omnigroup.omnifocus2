/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Jerome Lefebvre",
    "identifier": "com.jpl.newProject",
    "version": "0.3",
    "description": "Create a new project",
    "label": "New Templated Project",
    "shortLabel": "New Templated Project"
}*/

/*
Inputs for testing

Improve omnifocus script
I want to become king of GTD
Tags: Laptop
Folder: Jerome
Fix the heck of this script
vscode://file:///Users/jeromelefebvre/GitHub/com.omnigroup.omnifocus3
*/

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function formTagName(tags) {
    return tags.map(tag => tag.parent ? tag.parent.name + ":" + tag.name : tag.name)
}

function existingTags() {
    var existing = [];
    tags.forEach(topTag => {
        existing.push(topTag);
        topTag.tags.forEach(childrenTag => {
            existing.push(childrenTag);
        });
    });
    return existing
}

function existingFolders() {
    var existing = []
    folderNamed("Life").folders.forEach(folder => existing.push(folder));
    const OSIsoftFolder = folderNamed("OSIsoft")
    existing.push(OSIsoftFolder.folderNamed("OSIsoft"))
    existing.push(OSIsoftFolder.folderNamed("Training"))
    OSIsoftFolder.folderNamed("Customers").folders.forEach(folder => existing.push(folder))
    return existing
}

(() => {
    var action = new PlugIn.Action(function (selection) {
        const inputForm = new Form()
        const projectField = new Form.Field.String(
            "projectInput",
            "Project Name (as an action) V2",
            "Is the presentation given?" + getRandomInt(1, 100)
        )
        inputForm.addField(projectField)

        // GOAL
        const goalField = new Form.Field.String(
            "goalInput",
            "Goal (completed when..)",
            "I want to..."
        )
        inputForm.addField(goalField)

        // TAGS
        const tagsAsFlatList = existingTags();
        const tagField = new Form.Field.Option(
            "tagInput",
            "Tags",
            tagsAsFlatList,
            formTagName(tagsAsFlatList),
            tagsAsFlatList[1]
        )
        inputForm.addField(tagField);

        // FOLDER
        const foldersAsFlatList = existingFolders();
        const folderField = new Form.Field.Option(
            "folderInput",
            "Folder",
            foldersAsFlatList,
            foldersAsFlatList.map(folder => folder.name),
            foldersAsFlatList[1]
        )
        inputForm.addField(folderField);

        // If new customer
        const newCustomerField = new Form.Field.String(
            "newCustomerInput",
            "New Customer",
            null
        )
        inputForm.addField(newCustomerField)

        // TASKS
        inputForm.addField(new Form.Field.String(
            "taskInput",
            "First Task",
            `task1




`
        ))

        // REFERENCE
        const referenceField = new Form.Field.String(
            "referenceInput",
            "Reference Link",
            ""
            //"vscode://file/..."
        )
        inputForm.addField(referenceField)

        formPrompt = "Create a new project"
        formPromise = inputForm.show(formPrompt, "Continue")

        inputForm.validate = function (formObject) {

            const { projectInput, folderInput, newCustomerInput } = formObject.values;
            const noExistingProject = folderInput.projectNamed(projectInput) == null;
            //console.info("The selected folder is : " + folderInput.name)
            const whenNewCustomerCreated = (folderInput.name != ".") || newCustomerInput

            return noExistingProject && whenNewCustomerCreated
        }

        formPromise.then(function (formObject) {
            console.info("New project will be created");

            const { projectInput, folderInput, newCustomerInput, tagInput } = formObject.values;
            var folder = folderInput;
            
            if (newCustomerInput) {
                console.info(`A new customer will be created with name: ${newCustomerInput}`)
                // need to create new customer folder
                const customerFolder = foldersMatching("Customers")[0]
                folder = new Folder(newCustomerInput, customerFolder);
                
            }

            const OneDrivePath = 'file:///Users/jeromelefebvre/OneDrive%20-%20OSIsoft,%20LLC/Customers/'
            const folderReference = newCustomerInput? URL.fromString(`${OneDrivePath}${newCustomerInput}`) : URL.fromString(`${OneDrivePath}${folderInput['name']}`)
           
            const project = new Project(projectInput, folder)
            project.status = Project.Status.Active
            project.containsSingletonActions = false

            project.addTag(tagInput);
            project.note = "Goal: " + formObject.values["goalInput"];

            var referenceURL = formObject.values["referenceInput"];

            project.note += "\n\nReference: " + referenceURL;
            project.note += folderReference.string
            //project.addLinkedFileURL(folderReference);
            
            var reviewIntervalObj = project.reviewInterval
            reviewIntervalObj.steps = 7
            reviewIntervalObj.unit = "days"
            project.reviewInterval = reviewIntervalObj

            // Create new tasks here:
            var tasksList = formObject.values["taskInput"];

            const tasksName = tasksList.split("\n");
            tasksName.forEach(task => {
                if (task != "")
                    new Task(task, project)
            });

            //project.document.windows[0].perspective = Perspective.BuiltIn.Projects
            //document.windows[0].selectObjects([project]);
            const taskUrl = "omnifocus:///task/" + project.tasks[0].id.primaryKey;
            console.info("[New Project] opening: ${taskUrl}")
            URL.fromString(taskUrl).open();
            if (newCustomerInput) {
                const createFolderTasks = new Task("Create folder hiearchy by running", project)
                createFolderTasks.note += `/Users/jeromelefebvre/GitHub/Create-Project-Folder-Hierarchy/Create-New-Customer.ps1 -AccountName "${newCustomerInput}"`
                createFolderTasks.addLinkedFileURL(URL.fromString("file:///System/Applications/Utilities/Terminal.app"))
                new Task("Add in the folder reference created by the script", project)
            }

        })
        formPromise.catch(function (err) {
            console.log("form cancelled", err.message)
        })
    });

    action.validate = function (selection) {
        return true;
    };
    return action;
})();