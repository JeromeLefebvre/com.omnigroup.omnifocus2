/*{
    "author": "Jerome Lefebvre",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "com.jpl.Open Ressources",
    "version": "0.2",
    "description": "A plug-in that opens the all linked ressourcesof a task, or associated project",
    "label": "Open Ressources",
    "mediumLabel": "Open Ressources",
    "paletteLabel": "Open Ressources",
}*/


(() => {

    var open = function (url) {
        console.info(url.open ? url.string : url)
        url.open ? url.open() : URL.fromString(url).open()
    }
    const re = /(\b(https?|ftp|file|omnifocus|facetime|vscode|postman|hook):\/\/\/?[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;

    var action = new PlugIn.Action(function (selection) {
        console.info("[Open Ressource] Opening all the founds links in the selected task and project")
        const { tasks, projects } = selection
        const [task, ...otherTasks] = tasks
        const [project = task.parent, ...otherProjects] = projects

        // First check anything directly attached to a task or project
        task?.linkedFileURLs.forEach(open)
        project?.linkedFileURLs.forEach(open)

        // finally parse either the task or the project's note
        task?.note.match(re)?.forEach(open)
        project?.note.match(re)?.forEach(open)
    });

    action.validate = function (selection) {
        // Need to have a task or a project folder in which either contains a link or attached url
        const { tasks, projects } = selection

        if (!tasks.length && !projects.length)
            return false

        const [task, ...otherTasks] = tasks
        const [project = task.parent, ...otherProjects] = projects


        const validSelection = (task?.linkedFileURLs.length) ||
            (task?.parent?.linkedFileURLs.length) ||
            (task?.note && re.test(task.note)) ||
            (project?.linkedFileURLs.length) ||
            (project?.note && re.test(project.note))

        if (!validSelection) {
            console.error("No valid selections")
        }
        return validSelection

    };
    return action;
})();